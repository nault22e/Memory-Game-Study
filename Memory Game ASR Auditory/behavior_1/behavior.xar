<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Memory Game (1)" id="11" localization="8" tooltip="Enter description here" x="207" y="33"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Memory Game_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="3" /><Input name="HandRightLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightLeftTouched" inner="1" tooltip="HandRightLeftTouched desc" id="4" /><Input name="HandRightBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightBackTouched" inner="1" tooltip="HandRightBackTouched desc" id="5" /><Input name="HandLeftLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftLeftTouched" inner="1" tooltip="HandLeftLeftTouched desc" id="6" /><Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="RightBumperPressed desc" id="7" /><Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="RearTactilTouched desc" id="8" /><Input name="HandLeftBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="HandLeftBackTouched desc" id="9" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="FrontTactilTouched desc" id="10" /><Input name="HandLeftRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftRightTouched" inner="1" tooltip="HandLeftRightTouched desc" id="11" /><Input name="HandRightRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightRightTouched" inner="1" tooltip="HandRightRightTouched desc" id="12" /><Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="LeftBumperPressed desc" id="13" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="14" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Round" id="7" localization="8" tooltip="" x="232" y="288"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
import random
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = ALProxy("ALTextToSpeech")
        self.tts.setParameter("defaultVoiceSpeed", 90)
        self.currTask = None
        #self.numCorrect = 0

    def onUnload(self):
        pass

    def onInput_onStart(self, numTasks):
        time.sleep(1)
        self.once = False
        self.onPrint("In onStart")
        self.numCorrect = 0
        self.numWins = 0 #Number of rounds the player has gotten correct
        self.taskList = ["head","left hand","right hand","left foot", "right foot"] #List of task options
        self.createTasks(numTasks) #Generates tasks for the round

    def createTasks(self, numTasks):
        self.currTask = 0 #current place in task list
        self.tasks = []
        #creates task list randomly from the comprised list of task options
        for i in range (numTasks):
            self.tasks.append(random.choice(self.taskList))
        for i in range(len(self.tasks)):
            self.say =  ' \\pau=750\\'
            self.tts.say(self.say)
            self.say = self.tasks[i]
            self.playBeep()
            self.tts.say(self.say)
        self.say =  ' \\pau=300\\'
        self.tts.say(self.say)
        self.say = "Go!"
        self.tts.say(self.say)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onHead(self):
        part = "head"
        #self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.playBeep()
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onLeftHand(self, p):
        part = "right hand"
        #self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.playBeep()
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onRightHand(self, p):
        part = "left hand"
        #self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.playBeep()
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onLeftFoot(self, p):
        part = "right foot"
        #self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.playBeep()
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onRtFoot(self, p):
        part = "left foot"
        #self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.playBeep()
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def checkInput(self, input):
        if self.currTask is None:
            return
        #self.logger.info("\nCurrTask: " + str(self.currTask)+ "\ninput: "+input +"\ntask"+self.tasks[self.currTask])
        if input == self.tasks[self.currTask]: #If correct input
            self.numCorrect +=1
            #self.say = input
            #self.tts.say(self.say)
            time.sleep(2)
            self.onPrint("Input: " + str(self.say))

            self.onPrint("Length: " + str(self.tasks[len(self.tasks)-1]) + " == " + str(self.tasks[self.currTask]))

            #If this was the last task, give positive feedback and reset the round
            if len(self.tasks)-1 == self.currTask:
                self.say = "That's correct."
                self.tts.say(self.say)
                self.numWins += 1
                self.onPrint("That's correct. Init done round.")
                #self.onPrint("Accuracy: " + str(acc))
                #1 = true
                self.doneRound([1, self.numCorrect])

            self.currTask += 1

        else: #If incorrect input
            self.say = "Oops, you touched my " + input + " when you should have touched my " + self.tasks[self.currTask]
            self.tts.say(self.say)
            self.onPrint("Wrong, Init done round.")
            self.onPrint("Accuracy: " + str(self.numCorrect))
            self.doneRound([0, self.numCorrect])]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Passes in the number of tasks" id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHead" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onLeftHand" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="onRightHand" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="onLeftFoot" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="onRtFoot" type="0" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" /><Output name="doneRound" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Output name="onPrint" type="3" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="playBeep" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /></Box><Box name="Memory Game" id="2" localization="8" tooltip="This memory game has the user touch Pepper&apos;s sensors in a specific order starting with one and increasing with every couple of rounds.  The player will have 5 lives, and if the player gets two wrong in a row the number of tasks will decrement and then increse again after they get a few more rounds correct." x="236" y="82"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
import random as rand

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        self.prevWin = True #keeps track of the outcome of the previous game

        self.maxTasks = 8 #keeps track of the max number of tasks per round

        self.numLives = 1 #init number of lives

        self.say = "" #Phrases Pepper will say

        #self.currNumTasks = 1

        self.numTasksList = [1,2,3,4,5,6,6,7,7,8]

        #calcNumTasks increments right away, we start at -1 so the 1st idx will be 0
        self.counter = -1

    def onLoad(self):
        #put initialization code here
        self.tts = ALProxy("ALTextToSpeech")
        self.tts.setParameter("defaultVoiceSpeed", 90)
        self.logger.debug("Loaded box %s", self.getName())

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.say = "Ready for another round? This time, you will hear a beep to confirm that you have touched my hands, feet, or head. Let's begin!"
        self.tts.say(self.say)
        #self.dispOne()
        self.calcNumTasks()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_doneRound(self, winAcc):
        #if win
        if winAcc[0] == 1:
            self.calcNumTasks()

        else:
            #self.dispZero()
            self.say = "You have run out of lives. That's the end of the game. I hope you enjoyed playing, I know I did"
            self.tts.say(self.say)
            self.gameOver()
            self.onStopped()
        #end game, (ask if they want to see the results)
        #self.onPrint("Num Lives: " + str(self.numLives))


    def calcNumTasks(self):
        if self.counter != len(self.numTasksList)-1:
            self.counter += 1
        self.logger.info("Counter: %s" % self.counter)
        self.logger.info("Num Tasks: %s" %self.numTasksList[self.counter])
        self.startNewRound(self.numTasksList[self.counter])

    def gameOver(self):
        self.onPrint("Game Over")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="doneRound" type="0" type_size="1" nature="1" inner="0" tooltip="0 = incorrect answer&#x0A;1 = correct answer" id="4" /><Input name="roundFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="startNewRound" type="2" type_size="1" nature="2" inner="0" tooltip="Passes the number of tasks that should be held in the next round to the Round script." id="7" /><Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="onPrint" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="dispOne" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="dispZero" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" /></Box><Box name="Print" id="5" localization="8" tooltip="" x="514" y="256"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.arr=[]

    def onLoad(self):
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        arrLoc=self.arr
        arrLoc.append(p)
        self.arr=arrLoc
        self.onStopped(self.arr) #activate the output of the box

    def onInput_onInit(self):
        pass
        #self.arr=[]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Only Once" id="6" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="267" y="478"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" /><Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" /></Box><Box name="Accuracy Calculator_Old" id="3" localization="8" tooltip="Writes accuracy values for each round to text document - 1 text document per participant" x="449" y="637"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.accuracy = 0
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, winAcc):
        self.accuracy += winAcc[1]
        #If they got one wrong in this round, write accuracy score of that game to the txt file.
        if winAcc[0] == False:
            file1 = open("/Users/emnault/Scotland Project/Memory Game ASR Auditory/results.txt","a")
            file1.write("Auditory Accuracy: " + str(self.accuracy) + "\n")
            file1.close()
            self.onStopped()
        #self.onPrint("Result: " + str(result))
        #self.onPrint("Accuracy: " + str(acc))

        #self.onStopped() #activate the output of the box
        #pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="High Vibration" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="522" y="479"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import requests

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        url = 'http://192.168.1.238/'
        try:
            r = requests.post(url, data='GET /H')
        except Exception:
            pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Only Once (1)" id="4" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="408" y="522"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()
            time.sleep(0.5)
            self.bFirstTime = True]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" /><Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" /></Box><Box name="Play Beep" id="9" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="446" y="372"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Beep800Hz0.1ms.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Box name="Accuracy Calculator" id="10" localization="8" tooltip="Writes accuracy values for each game to log viewer" x="478" y="77"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[import os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.accuracy = 0
        with open("/tmp/results.txt","a") as f:
                f.write("Auditory Accuracy: \n")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, winAcc):
        self.accuracy += winAcc[1]
        #If they got one wrong in this round, write accuracy score of that game to the txt file.
        # Use $ cat /tmp/results.txt in ssh (ssh nao@pepper) to see txt file output
        #If did not win
        if winAcc[0] == 0:
            with open("/tmp/results.txt","a") as f:
                f.write("=============\n")
                f.write(str(self.accuracy) + "\n")

            self.logger.info("Auditory: \n =============" + str(self.accuracy) + "\n")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="4" outputowner="7" indexofoutput="10" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="5" outputowner="7" indexofoutput="9" /><Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="7" /><Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="9" /><Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="12" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="3" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="4" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="5" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="6" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="8" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="9" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="10" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="11" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="12" /><Link inputowner="7" indexofinput="7" outputowner="0" indexofoutput="13" /><Link inputowner="7" indexofinput="8" outputowner="0" indexofoutput="7" /><Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="13" /><Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="10" /><Link inputowner="0" indexofinput="14" outputowner="10" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Memory Game_Old" id="16" localization="8" tooltip="Enter description here" x="135" y="174"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Memory Game_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="MiddleTactilTouched desc" id="3" /><Input name="HandRightLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightLeftTouched" inner="1" tooltip="HandRightLeftTouched desc" id="4" /><Input name="HandRightBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightBackTouched" inner="1" tooltip="HandRightBackTouched desc" id="5" /><Input name="HandLeftLeftTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftLeftTouched" inner="1" tooltip="HandLeftLeftTouched desc" id="6" /><Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="RightBumperPressed desc" id="7" /><Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="RearTactilTouched desc" id="8" /><Input name="HandLeftBackTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftBackTouched" inner="1" tooltip="HandLeftBackTouched desc" id="9" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="FrontTactilTouched desc" id="10" /><Input name="HandLeftRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandLeftRightTouched" inner="1" tooltip="HandLeftRightTouched desc" id="11" /><Input name="HandRightRightTouched" type="0" type_size="1" nature="4" stm_value_name="HandRightRightTouched" inner="1" tooltip="HandRightRightTouched desc" id="12" /><Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="LeftBumperPressed desc" id="13" /><Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="" id="14" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Round" id="7" localization="8" tooltip="" x="232" y="288"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
import random
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = ALProxy("ALTextToSpeech")
        self.tts.setParameter("defaultVoiceSpeed", 90)
        self.currTask = None
        #self.numCorrect = 0

    def onUnload(self):
        pass

    def onInput_onStart(self, numTasks):
        time.sleep(1)
        self.once = False
        self.onPrint("In onStart")
        self.numCorrect = 0
        self.numWins = 0 #Number of rounds the player has gotten correct
        self.taskList = ["head","left hand","right hand","left foot", "right foot"] #List of task options
        self.createTasks(numTasks) #Generates tasks for the round

    def createTasks(self, numTasks):
        self.currTask = 0 #current place in task list
        self.tasks = []
        #creates task list randomly from the comprised list of task options
        for i in range (numTasks):
            self.tasks.append(random.choice(self.taskList))
        self.say =  ' \\pau=750\\'.join(self.tasks)
        self.onPrint("List: " + '-'.join(self.tasks))
        self.tts.say(self.say)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_onHead(self):
        part = "head"
        self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onLeftHand(self, p):
        part = "left hand"
        self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onRightHand(self, p):
        part = "right hand"
        self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onLeftFoot(self, p):
        part = "left foot"
        self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def onInput_onRtFoot(self, p):
        part = "right foot"
        self.playBeep()
        try:
            if not self.once:
                self.once = True
                self.checkInput(part)
                self.once = False
        except AttributeError:
            pass

    def checkInput(self, input):
        if self.currTask is None:
            return
        result = True
        self.onPrint("CurrTask: " + str(self.currTask))
        if input == self.tasks[self.currTask]: #If correct input
            self.numCorrect +=1
            #self.say = input
            #self.tts.say(self.say)
            self.onPrint("Input: " + str(self.say))

            self.onPrint("Length: " + str(self.tasks[len(self.tasks)-1]) + " == " + str(self.tasks[self.currTask]))
            #If this was the last task, give positive feedback and reset the round
            if len(self.tasks)-1 == self.currTask:
                self.say = "That's correct."
                self.tts.say(self.say)
                self.numWins += 1
                self.onPrint("That's correct. Init done round.")
                self.onPrint("Result: " + str(result))
                #self.onPrint("Accuracy: " + str(acc))
                #self.doneRound(result, self.numCorrect)
                #1 = true
                self.doneRound([1, self.numCorrect])

        else: #If incorrect input
            self.say = "Oops, you touched my " + input + " when you should have touched my " + self.tasks[self.currTask]
            self.tts.say(self.say)
            result = False
            self.onPrint("Wrong, Init done round.")
            #self.onPrint(result + self.numCorrect)
            #self.onPrint("Result: " + str(result))
            self.onPrint("Accuracy: " + str(self.numCorrect))
            #self.doneRound(result, self.numCorrect)
            self.doneRound([0, self.numCorrect])
        #Reset round

        self.currTask += 1]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Passes in the number of tasks" id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHead" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onLeftHand" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="onRightHand" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="onLeftFoot" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="onRtFoot" type="0" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" /><Output name="doneRound" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Output name="onPrint" type="3" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="playBeep" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /></Box><Box name="Memory Game" id="2" localization="8" tooltip="This memory game has the user touch Pepper&apos;s sensors in a specific order starting with one and increasing with every couple of rounds.  The player will have 5 lives, and if the player gets two wrong in a row the number of tasks will decrement and then increse again after they get a few more rounds correct." x="236" y="82"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from naoqi import ALProxy
import random as rand

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        self.prevWin = True #keeps track of the outcome of the previous game

        self.maxTasks = 8 #keeps track of the max number of tasks per round

        self.numLives = 1 #init number of lives

        self.say = "" #Phrases Pepper will say

        #self.currNumTasks = 1

        self.numTasksList = [1,2]
        #[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]

        #calcNumTasks increments right away, we start at -1 so the 1st idx will be 0
        self.counter = -1

    def onLoad(self):
        #put initialization code here
        self.tts = ALProxy("ALTextToSpeech")
        self.tts.setParameter("defaultVoiceSpeed", 90)
        self.logger.debug("Loaded box %s", self.getName())

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.dispOne()
        self.calcNumTasks()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_doneRound(self, winAcc):
        #if win
        if winAcc[0] == 1:
            self.calcNumTasks()

        else:
            #self.dispZero()
            self.say = "You have run out of lives. That's the end of the game. I hope you enjoyed playing, I know I did"
            self.tts.say(self.say)
            self.gameOver()
            self.onStopped()
        #end game, (ask if they want to see the results)
        #self.onPrint("Num Lives: " + str(self.numLives))


    def calcNumTasks(self):
        if self.counter != len(self.numTasksList)-1:
            self.counter += 1
        self.startNewRound(self.numTasksList[self.counter])

    def gameOver(self):
        self.onPrint("Game Over")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="doneRound" type="0" type_size="1" nature="1" inner="0" tooltip="0 = incorrect answer&#x0A;1 = correct answer" id="4" /><Input name="roundFinished" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="startNewRound" type="2" type_size="1" nature="2" inner="0" tooltip="Passes the number of tasks that should be held in the next round to the Round script." id="7" /><Output name="onSay" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="onPrint" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="dispOne" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="dispZero" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" /></Box><Box name="Print" id="5" localization="8" tooltip="" x="514" y="256"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.arr=[]

    def onLoad(self):
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        arrLoc=self.arr
        arrLoc.append(p)
        self.arr=arrLoc
        self.onStopped(self.arr) #activate the output of the box

    def onInput_onInit(self):
        pass
        #self.arr=[]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Only Once" id="6" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="267" y="478"><bitmap>media/images/box/loop.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" /><Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" /></Box><Box name="Hands on Hips" id="8" localization="8" tooltip="" x="74" y="460"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="25" size="25"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-21.9457" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0.774225" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-2.77269" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="25" value="-0.483421" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="25" value="-0.367348" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-88.5542" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-30.3491" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0.153174" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="92.3508" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="47.6586" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="13.5135" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="88.464" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="29.8892" /></ActuatorCurve><ActuatorCurve name="" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.152598" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="92.4142" /></ActuatorCurve><ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-47.7214" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="-13.3238" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Accuracy Calculator" id="3" localization="8" tooltip="Writes accuracy values for each round to text document - 1 text document per participant" x="507" y="131"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.accuracy = 0
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, winAcc):
        self.accuracy += winAcc[1]
        #If they got one wrong in this round, write accuracy score of that game to the txt file.
        if winAcc[0] == False:
            file1 = open("/Users/emnault/Scotland Project/Memory Game ASR Auditory/results.txt","a")
            file1.write("Auditory Accuracy: " + str(self.accuracy) + "\n")
            file1.close()
            self.onStopped()
        #self.onPrint("Result: " + str(result))
        #self.onPrint("Accuracy: " + str(acc))

        #self.onStopped() #activate the output of the box
        #pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="498" y="436"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Beep800Hz0.1ms.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio player" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="4" outputowner="7" indexofoutput="10" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="5" outputowner="7" indexofoutput="9" /><Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="7" /><Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="9" /><Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="12" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="3" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="4" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="6" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="8" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="9" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="10" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="11" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="12" /><Link inputowner="7" indexofinput="7" outputowner="0" indexofoutput="13" /><Link inputowner="7" indexofinput="8" outputowner="0" indexofoutput="7" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="10" /><Link inputowner="0" indexofinput="14" outputowner="3" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="13" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Memory Game Intro" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="53" y="65"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Ready for another round? This time, you will hear a beep to confirm that you have touched my hands, feet or head. Let&apos;s begin!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /><Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter><Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" /></Box><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="14" /><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>